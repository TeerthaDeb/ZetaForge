{
  "information": {
    "id": "canny-edge",
    "name": "Canny Edge",
"description": "Applies Canny edge detection to an image over a range of threshold values.\n\nParameters:\nimage_path (str): The file path to the input image on which edge detection will be applied.\nrange_min (int): The minimum threshold value for the edge detection process.\nrange_max (int): The maximum threshold value for the edge detection process.\nstep (int): The step size to increment the threshold value for each iteration.\n\nReturns:\ndict: A dictionary containing the file paths of the processed images with edge detection applied, stored under the key 'image_paths'.",    "block_version": "block version number",
    "block_source": "core/blocks/canny-edge",
    "block_type": "compute",
    "system_versions": ["0.1"]
  },
  "inputs": {
    "image_path": {
      "type": "file",
      "connections": [],
      "relays": []
    },
    "range_min": {
      "type": "int",
      "connections": [],
      "relays": []
    },
    "range_max": {
      "type": "int",
      "connections": [],
      "relays": []
    },
    "step": {
      "type": "int",
      "connections": [],
      "relays": []
    }
  },
  "outputs": {
    "image_paths": {
      "type": "List[file]",
      "connections": [],
      "relays": []
    }
  },
  "action": {
    "container": {
      "image": "canny-edge",
      "version": "latest",
      "command_line": ["python", "-u", "entrypoint.py"]
    }
  },
  "views": {
    "node": {
      "active": "True or False",
      "title_bar": {},
      "preview": {},
      "html": "",
      "pos_x": "300",
      "pos_y": "200",
      "pos_z": "999, this is the z-index for 2D canvas"
    }
  },
  "events": {}
}
